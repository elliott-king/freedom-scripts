import boto3
import json
import decimal
import uuid

from boto3.dynamodb.conditions import Key, Attr
from botocore.exceptions import ClientError

from scripts import legacy_support

# Updating items after a full table scan.
# table.update_item(Key={'id': item['id']}, UpdateExpression='set permanent = :r', ExpressionAttributeValues={':r': 'true'})

# Tables autogenerated by Amplify Api
PROD_ART_TABLE = 'PublicArt-cevvqsg2rzeifnuzezmiqvz3bu-freedom'
DEV_ART_TABLE = 'PublicArt-lnpcytykrjgmbk5nkfbmafs6dq-events'

PROD_EVENTS_TABLE = 'Event-cevvqsg2rzeifnuzezmiqvz3bu-freedom'
DEV_EVENTS_TABLE = 'Event-lnpcytykrjgmbk5nkfbmafs6dq-events'

DEV_PHOTOS_TABLE = 'Photo-lnpcytykrjgmbk5nkfbmafs6dq-events'
PROD_PHOTOS_TABLE = 'Photo-cevvqsg2rzeifnuzezmiqvz3bu-freedom'

# Helper class to convert a DynamoDB item to JSON.
class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            if abs(o) % 1 > 0:
                return float(o)
            else:
                return int(o)
        return super(DecimalEncoder, self).default(o)

def delete_table(table_name):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    table = dynamodb.Table(table_name)
    print(table.delete())

def create_table(table_name, key_column='id'):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    session = boto3.session.Session()
    client = session.client('dynamodb', region_name='us-east-1')
    client.get_waiter('table_not_exists').wait(TableName=table_name)
    print('creating table')

    # TODO: add sort key: 'name'
    table = dynamodb.create_table(
            TableName=table_name,
            KeySchema=[
                {
                    'AttributeName': key_column,
                    'KeyType': 'HASH'
                }
            ],
            AttributeDefinitions=[
                {
                    'AttributeName': key_column,
                    'AttributeType': 'S'
                }
            ],
            ProvisionedThroughput={
                'WriteCapacityUnits': 5,
                'ReadCapacityUnits': 5
            }
        )

    print('New table:', table_name, 'with', table.item_count, 'items.')

def add_items_to_table(table, photo_table, items):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')

    table = dynamodb.Table(table)
    photos_table = dynamodb.Table(photo_table)

    for i in items:
        if 'id' not in i:
            i['id'] = str(uuid.uuid4())
        photo = legacy_support.update_legacy_photo(i)
        photos = i.pop('photos', None)

        i = json.dumps(i, cls=DecimalEncoder)
        # DynamoDB does not take float values.
        i = json.loads(i, parse_float=decimal.Decimal)

        print('Adding location', i['name'])
        response = table.put_item(Item=i)
        print('Location HTTP code', response['ResponseMetadata']['HTTPStatusCode'])
        if photo:
            response = photos_table.put_item(Item=photo)
            print('Photo    HTTP code', response['ResponseMetadata']['HTTPStatusCode'])
            i['photos'] = photos
        
def get_all_items_from_table(table_name):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    table = dynamodb.Table(table_name)
    
    response = table.scan()
    return response['Items']

def delete_item(item, table_name):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    table = dynamodb.Table(table_name)
    
    table.delete_item(Key={'id': item['id']})